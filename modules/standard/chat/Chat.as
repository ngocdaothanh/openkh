/** * This program can be compiled with the Flex SDK. When compiling, you must * set the classpath to revent library. */package {	import flash.display.Sprite;	import flash.display.LoaderInfo;	import flash.text.TextField;	import flash.display.SimpleButton;	import flash.external.ExternalInterface;	import flash.events.MouseEvent;	import flash.utils.setTimeout;	import revent.Client;	import revent.CallEvent;	public class Chat extends Sprite {		private static const RECONNECT_DELAY:int = 5;  // [sec]		// Client -> server		private static const CMD_ENTER:int        = 0;		private static const CMD_ENQUEUE_CHAT:int = 1;		// Server -> client		private static const CMD_ON_ENTER:int = 0;		private static const CMD_ON_CHAT:int  = 1;		private static const CMD_ON_LEAVE:int = 2;		private var _client:Client;		private var _host:String;		private var _port:int;		private var _sessionId:String;		public function Chat():void {			ExternalInterface.addCallback("enqueueChat", enqueueChat);			var vars:Object = LoaderInfo(this.root.loaderInfo).parameters;			_host = String(vars["host"]);			_port = int(vars["port"]);			_sessionId = String(vars["sessionId"]);			_client = new Client();			_client.addEventListener(CallEvent.CONNECT, onConnected);			_client.addEventListener(CallEvent.CLOSE, onClose);			_client.addEventListener(CallEvent.IO_ERROR, onIOError);			_client.addEventListener(CallEvent.SECURITY_ERROR, onSecurityError);			_client.addEventListener(CallEvent.CALL, onCall);			_client.addEventListener(CallEvent.RESULT, onResult);			_client.addEventListener(CallEvent.ERROR, onError);			connect();		}		public function enqueueChat(msg:String):void {			if (_client.connected) {				_client.call(CMD_ENQUEUE_CHAT, msg);			}		}		public function connect():void {			info("Connecting to chat server...");			_client.connect(_host, _port);		}		// --------------------------------------------------------------------------		private function info(msg:String):void {			ExternalInterface.call("OpenKH.chats.addSystem", escapeBackslashes(msg));		}		// --------------------------------------------------------------------------		private function onConnected(event:CallEvent):void {			info("Connected");			_client.call(CMD_ENTER, _sessionId);		}		private function onClose(event:CallEvent):void {			setTimeout(connect, RECONNECT_DELAY*1000);		}		private function onIOError(event:CallEvent):void {			setTimeout(connect, RECONNECT_DELAY*1000);		}		private function onSecurityError(event:CallEvent):void {			setTimeout(connect, RECONNECT_DELAY*1000);		}		private function onCall(event:CallEvent):void {			var a:Array;			var userName:String;			switch (event.cmd) {			case CMD_ON_ENTER:				userName = event.value as String;				ExternalInterface.call("OpenKH.chats.enter", escapeBackslashes(userName));				break;			case CMD_ON_CHAT:				a = event.value as Array;				userName = escapeBackslashes(a[0]);				var msg:String = escapeBackslashes(a[1]);				ExternalInterface.call("OpenKH.chats.add", userName, msg);				break;			case CMD_ON_LEAVE:				userName = event.value as String;				ExternalInterface.call("OpenKH.chats.leave", escapeBackslashes(userName));				break;			}		}		private function onResult(event:CallEvent):void {			var a:Array;			var userName:String;			var userNames:Array;			var chats:Array;			var chats2:Array;			if (event.cmd == CMD_ENTER) {				a = event.value as Array;				userName = a[0];				userNames = a[1];				chats = a[2];				chats2 = new Array();				for (var i:int = 0; i < chats.length; i++) {					chats2.push(new Array(2));					chats2[i][0] = escapeBackslashes(chats[i][0]);					chats2[i][1] = escapeBackslashes(chats[i][1]);				}				ExternalInterface.call("OpenKH.chats.addBatch", userName, userNames, chats2);			}		}		private function onError(event:CallEvent):void {		}		private function escapeBackslashes(s:String):String {			if (s == null) {				return "";			} else {				s = s.replace(/\n/g, "\\n");				s = s.replace(/\\/g, "\\\\");				return s;			}		}	}}