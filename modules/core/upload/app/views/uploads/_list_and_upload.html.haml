-# Input: object

#upload_list= html_upload_list(object)

- if mod[:me].nil?
  %p.notice= link_to(t('upload.login_to_upload'), login_path)
- else
  - form_tag(uploads_path, :id => 'upload_form', :target => 'upload_frame', :multipart => true, :method => 'post', :onsubmit => 'return captcha.show(uploadUpload)') do
    = hidden_field_tag('model_type', object.class.to_s)
    = hidden_field_tag('model_id', object.id)
    = file_field_tag('uploaded_file', :size => 30)
    = '(' + t('upload.limit', :mb => UploadConf.instance.limit) + ')'
    %br
    = submit_tag(t('upload.upload'))

  #upload_loading{:style => 'display:none'}= image_tag('loading.gif')

%iframe#upload_frame{:name => 'upload_frame', :style => 'position:absolute; left:-1000px; top:-1000px;'}

:javascript
  function uploadUpload() {
    $('upload_form').submit();
    uploadToggle();
  }

  function uploadDelete(a) {
    if (!confirm('#{t('common.delete_confirmation')}')) {
      return;
    }

    var href = a.parentNode.parentNode.getElementsByTagName('a')[0].href;
    href = decodeURIComponent(href);
    new Ajax.Request('/uploads/dummy', {
      method: 'delete',
      parameters: 'href=' + encodeURIComponent(href) + '&model_type=#{object.class.to_s}&model_id=#{object.id}',
      evalScripts: true
    });
  }

  function uploadToggle() {
    $('upload_form').toggle();
    $('upload_loading').toggle();
    return true;
  }
